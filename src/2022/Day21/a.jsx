import React, { useState } from "react";
import eData from "./exampleData";
import rData from "./realData";
import Render from "../../Render";
import { evaluate } from "mathjs";

const MAP_SIZE = 30;
const ROPE_LENGTH = 10;

// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

let eeData = `root: pppw + sjmn
dbpl: 5
cczh: sllz + lgvd
zczc: 2
ptdq: humn - dvpt
dvpt: 3
lfqf: 4
humn: 5
ljgn: 2
sjmn: drzm * dbpl
sllz: 4
pppw: cczh / lfqf
lgvd: ljgn * ptdq
drzm: hmdt - zczc
hmdt: 32`;

for (let testNr = 0; testNr < 1000000; testNr++) {
  if (testNr % 100 === 0) console.log(testNr);
  if (
    evaluate(
      `(3 * (((4 * 7) * (6 + 11)) + (((2 * ((((((2 * 14) * (4 * 4)) + (((3 * ((7 * 2) / 2)) + (8 * (11 * 2))) + ((((3 * ((8 * 2) + 7)) + (2 * ((3 + ((2 * (2 * (((9 + ((7 * 2) - 1)) / 2) * 2))) / 2)) * 4))) / 5) * 4))) * (((((((10 + 11) + 4) + (((19 - 2) * 2) + 11)) - (5 + 18)) * (3 * (3 + 6))) + (((((13 * 2) * 2) * 2) + ((5 + 2) * ((((3 * 8) + (2 * 7)) * 2) - (((2 * 4) + (3 * 5)) - 4)))) * 2)) + (2 * ((7 * 3) + ((4 + 9) - 1))))) * ((((((4 * ((((2 * ((2 + 5) * 5)) + (3 * (((19 * 4) / 4) + 4))) * 2) - (3 * (5 + 2)))) + (5 + (16 - 2))) + ((((3 * 5) + (2 * (((1 + 6) + 1) + 3))) + 6) * (2 * (5 * 5)))) * 2) + (((((3 * (1 + 6)) + 9) + (17 + (((4 * 4) * 3) / 8))) * 3) * 3)) * (((((5 * 2) * 8) + (3 * 15)) + ((20 + 3) + (4 * 2))) + ((2 * (2 * (2 + 14))) + ((((2 * 13) * 2) + (3 * 3)) + (4 * 3)))))) + ((((8 * (8 + (4 + 17))) + ((15 + (2 * 6)) * 3)) * 2) * (2 * (2 * ((3 * (((((((((((2 + (9 * (5 * 3))) * 2) / 2) * (4 * (((5 * 5) - 2) * 2))) + (((6 * (11 * 2)) * (2 * (((((5 + 3) + (3 * ((((1 + 5) + 1) * (2 + 4)) + 5))) - (6 * (10 - 3))) * 5) + (18 * 11)))) / 2)) + (7 * (((((5 + 2) + 6) * 4) + (3 * (3 * 3))) + ((3 * 7) * (2 * 9))))) - ((((6 * (((3 * (3 * 9)) * 9) - (((2 * ((((7 + (3 * 2)) * 2) + 17) + ((6 * 6) + (6 + 18)))) / 2) * 2))) + (19 * (13 + (3 * (15 + 1))))) * 2) * 4)) * 2) / 2) * ((2 * (19 * ((5 * (11 + 2)) + (((13 + 4) * (11 * 10)) / 5)))) + (((6 * 10) + (3 * 11)) * (2 + ((2 * (14 + 17)) / 2))))) + ((4 * (((((2 * 17) * (17 * 14)) - (((4 + ((2 * 3) + (1 + (6 * 6)))) * 6) + (((4 * 13) * 2) + ((11 + ((((((3 * 3) * 2) + 5) * 3) + 4) - ((3 * 7) + 2))) * 3)))) + ((3 * (1 + 10)) * (((15 + (2 * ((2 * ((4 * 4) - 4)) - (5 + 2)))) * 7) + (((11 * (((((2 * (((4 * (20 + 3)) / 4) + ((3 * 3) * 2))) / 2) * 5) + (((2 * 3) * 6) + 7)) / (4 * 2))) + (3 * 4)) * 2)))) + (11 * (((((1 + 6) * 3) * 4) + 2) + ((5 * ((((2 * (2 + (14 / 2))) - 5) * 3) + 2)) + ((19 * 2) + ((7 + 9) + (12 + (11 * 2))))))))) * (((2 * ((((7 * 3) * 5) * (((2 * 17) - (5 + (8 - 2))) * (2 + 5))) + ((6 + 2) * (((((((11 + ((((6 + (3 + 4)) + 10) + 4) + 4)) + 4) - (4 * 2)) + 1) + ((5 * 3) + (13 + (((8 + ((14 / 2) + 8)) + (4 * 2)) + 3)))) * 2) * 2)))) + ((19 + (3 * (3 * 5))) * (2 * (((((8 + ((4 + 3) + ((2 + 5) + 3))) + (3 + 13)) - (4 + 7)) + 13) * 2)))) + (15 * ((3 * ((((((2 * (((((((5 + 8) * 2) + 5) * 2) / 2) + 7) / 2)) / 2) * 9) + (4 * 12)) + (5 + 2)) + (5 + 2))) + ((2 * ((((3 * (((2 * ((((((1 + (20 + 3)) + 10) / 2) + (3 * (4 * 2))) + (5 * 5)) / (2 * 3))) / 2) + 18)) / 3) + ((2 * (2 + (3 * 3))) * 2)) + (3 * 7))) * ((7 * 7) - 9)))))))) / 3)))))) - (((((((((6 + 5) * 2) + ((((((3 * 3) * 3) + 2) * 2) + (2 * (4 + (5 + 14)))) - ((((8 + (2 * (2 * 4))) - (3 + 4)) + 6) + 6))) * 2) + (((7 * ((5 * (10 + 3)) + (2 * (11 + (2 * 4))))) + ((((((((((((((10 + 1) - 2) * 11) + (2 * (5 * (((2 * 10) + 3) + (2 * 3))))) + (8 * 4)) + (3 * ((((((4 * (4 + 2)) + ((((7 * 5) * ((10 + 4) / 2)) + (2 * ((19 * ((((5 * ((((((4 + (20 + 2)) + ((((((13 + 20) * ((1 + (3 * 2)) + 10)) + (((((14 * (5 + 2)) * ((3 * (6 * 2)) + (4 * 7))) + ((12 * (5 * 5)) + ((((1 + (((2 * 4) - 2) * 11)) - 16) * 4) + ((2 + 5) * 3)))) / (4 + 3)) + (((((2 * ((((((4 * 5) * ((1 + 10) * 2)) / 4) + (((5 * 3) * 3) + 2)) * 2) + (((4 * ((2 + (2 * 3)) * 2)) + (((2 + 7) * 3) + (2 * (8 + (3 * 3))))) + ((11 * 2) + 2)))) + ((((((((((((((((3 * 3) * 9) + (((((2 + (3 * 5)) + (3 * 5)) * 6) * (((((2 * (((5 + ((((2 + 5) + (11 + 5)) * 3) / 3)) + ((2 * 3) * (11 * 2))) + 7)) + (((5 + (((7 * 2) / 2) * 3)) / 2) * 16)) + ${testNr}) / (3 * 2)) - (((4 * 3) * ((5 * 3) + 2)) + (((7 * ((2 * 5) - 3)) + (8 + ((4 * ((3 * 17) + (9 + 2))) / 8))) + ((2 * 7) * (3 + 13)))))) - (((((17 * 2) - 11) * 7) - (2 * ((3 + 10) * 2))) * 7))) / ((((15 - 4) * 4) * 2) / (2 * 4))) + (((((4 * 7) * 2) / 8) + (12 + 4)) + ((((((((8 * 2) * (2 * (((2 * 17) + 3) * 2))) / 2) / 2) + (((((3 * 5) * 2) + (6 * 4)) * 3) - ((7 * 7) + 4))) * 2) / 2) + ((((4 * 4) + 13) * 3) * 2)))) * 2) - ((((5 * 5) * 5) + (3 * 2)) * 2)) / (2 * 3)) + (3 * ((((4 * 2) * ((2 * ((2 * (10 + (8 * 3))) / 4)) / 2)) + (((5 + 7) * 2) + (3 + 20))) / 3))) * 18) - (15 * ((((6 + 3) * 3) + (5 + 1)) - 2))) * 2) + (((4 * 7) + ((17 + 6) * 3)) * 4)) / 2) - ((3 * 3) * (((((3 + 4) * 3) * 2) + (4 * 11)) + (1 + (2 * 12))))) / 2)) * 3) - (((7 + ((16 + 1) + ((5 * 2) + 3))) * 7) + ((((2 * 4) * 2) * 4) * 2))) * 2))) / 2) - ((5 + 6) * ((4 * 2) + ((9 - 1) * 2)))) / 2)) * 2) - ((((15 * 2) + (3 + (2 * 4))) * 5) + (1 + (((2 * 6) * 3) + (((1 + 10) * 2) + 2))))) / (4 * 3)) + (((2 * 3) * 6) * (10 + (6 + 3))))) - (((12 + (5 * 5)) * 2) * 2)) / 11) + (((7 * (2 + 5)) * 6) + ((12 * 2) + (3 + (((14 - 4) * 4) / 4)))))) - ((3 + (4 * 5)) * (4 + 15))))) / 5)) * 3) - ((((((2 * ((2 * (16 + ((7 * 3) + 4))) / 2)) - ((5 + (16 * 2)) - ((11 * 2) / 2))) * (5 * (4 + (2 * 3)))) / 2) / 2) + ((2 * ((3 + 4) + (8 + (5 + 9)))) + ((3 * 3) * ((15 + 3) + 5))))) / 2) - (2 * ((4 * (((10 + (7 + (2 * 3))) * 3) / 3)) + ((3 * 13) + (4 * 17))))))) + (((10 * 4) + 1) * (2 + 5))) / 2) + (((1 + ((4 + 3) + 4)) * 2) + 2)) * 2) - (13 * ((5 * 5) * 2))) / 7) - ((3 + (3 * (3 * 3))) * ((3 + 8) * 2))) / 2)) * 15)) * 2) - (3 * (5 + (((1 + (2 * 3)) - 1) * (((17 * 2) + 4) + ((16 + (2 * 3)) / 2)))))) + ((((3 + 5) - 2) * (((11 + 12) + 8) - 2)) - 17)) / 2)) / (3 * 2))))`
    ) ===
    evaluate(
      "(((((7 * ((3 * ((((2 * (13 + (4 * 7))) * (((16 + ((5 + (2 * (4 + 3))) + ((3 * 2) * 4))) * 2) / 2)) * (((2 * ((((2 * ((5 + 18) + (2 * (3 * 3)))) + (5 * (14 - 3))) * 2) / 2)) / 2) * 2)) + (((((((11 + 1) + ((((2 + (3 * 3)) * 3) + (4 * 6)) + ((4 + 9) * 5))) * 4) - (3 * 15)) - (13 * 3)) + ((((10 * 3) + 1) * 3) + (14 + (((2 * 4) + (3 * 3)) * (3 * 4))))) * ((((2 * 3) * (((11 * 3) - 9) + ((4 + 9) + 4))) - ((3 * 7) + (((2 * (4 + 3)) + 15) * 2))) * ((3 * (3 * 3)) + 4))))) - (((2 * ((((2 * (2 * 4)) * 6) * ((((((2 * ((((((5 * 2) + 3) * 6) / 2) + ((2 * ((((18 + 3) / 3) * (18 + 5)) / 7)) + (13 * 4))) + (3 * 12))) / 2) + (14 * (3 * 2))) * 8) - ((6 + (16 - 3)) * (16 + 7))) * 3)) + (((((1 + ((3 * 19) * 2)) - (3 * 3)) + ((5 + 2) * 19)) * (20 + (1 + (8 + (14 * 2))))) + ((11 * (((((2 * 3) * 16) + 1) * 2) / 2)) * (11 * 2))))) * 2) * 2))) / (10 - 3)) * 2) / 2) * ((17 * ((9 + 2) * 11)) * (((((1 + (5 * (6 + 2))) + 2) + 5) + ((((7 * (1 + (3 * 2))) - 2) * 2) / 2)) * 15)))"
    )
  ) {
    console.log(
      "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c          testNr    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 39 \n",
      "color: white; background: black; font-weight: bold",
      "",
      testNr
    );
    break;
  }
}

// const data = rData.split(/\n/);

// let monkeys = {};
// // for (let i = 0; i < 500; i++) {
// // if (i % 10 === 0) console.log(i);
// monkeys = {};
// data.forEach((row, rowIndex) => {
//   let number = row.split(":")[0] === "humn" ? 301 : parseInt(row.split(" ")[1]);

//   let operation = null;
//   let otherMonkeys = [];
//   if (number > -1) {
//   } else {
//     operation = row.split(":")[0] === "root" ? "=" : row.split(" ")[2];
//     otherMonkeys = [row.split(" ")[1], row.split(" ")[3]];
//   }

//   monkeys[row.split(":")[0]] = {
//     operation: operation,
//     result: number > -1 ? number : null,
//     string: number > -1 ? number.toString() : "",
//     otherMonkeys: otherMonkeys,
//     resultDone: number > -1,
//   };
// });

// let done = false;
// // debugger;
// while (!done) {
//   Object.keys(monkeys).forEach((monkeyId) => {
//     if (monkeys[monkeyId].resultDone) {
//       return;
//     }

//     let operation = monkeys[monkeyId].operation;
//     let monkey1 = monkeys[monkeys[monkeyId].otherMonkeys[0]];
//     let monkey2 = monkeys[monkeys[monkeyId].otherMonkeys[1]];
//     if (monkey1.resultDone && monkey2.resultDone) {
//       if (operation === "+") {
//         monkeys[monkeyId].result = monkey1.result + monkey2.result;
//         monkeys[monkeyId].string = `(${monkey1.string} + ${monkey2.string})`;
//         monkeys[monkeyId].resultDone = true;
//       }
//       if (operation === "-") {
//         monkeys[monkeyId].result = monkey1.result - monkey2.result;
//         monkeys[monkeyId].string = `(${monkey1.string} - ${monkey2.string})`;
//         monkeys[monkeyId].resultDone = true;
//       }
//       if (operation === "*") {
//         monkeys[monkeyId].result = monkey1.result * monkey2.result;
//         monkeys[monkeyId].string = `(${monkey1.string} * ${monkey2.string})`;
//         monkeys[monkeyId].resultDone = true;
//       }
//       if (operation === "/") {
//         monkeys[monkeyId].result = monkey1.result / monkey2.result;
//         monkeys[monkeyId].string = `(${monkey1.string} / ${monkey2.string})`;
//         monkeys[monkeyId].resultDone = true;
//       }
//       if (operation === "=") {
//         console.log(
//           "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c            evaluate(monkey1.string)    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 90 \n",
//           "color: white; background: black; font-weight: bold",
//           "",
//           monkey1.string
//         );
//         console.log(
//           "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c            evaluate(monkey1.string)    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 90 \n",
//           "color: white; background: black; font-weight: bold",
//           "",
//           monkey2.string
//         );

//         console.log(
//           "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c            evaluate(monkey1.string)    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 102 \n",
//           "color: white; background: black; font-weight: bold",
//           "",
//           evaluate(
//             "(3 * (((4 * 7) * (6 + 11)) + (((2 * ((((((2 * 14) * (4 * 4)) + (((3 * ((7 * 2) / 2)) + (8 * (11 * 2))) + ((((3 * ((8 * 2) + 7)) + (2 * ((3 + ((2 * (2 * (((9 + ((7 * 2) - 1)) / 2) * 2))) / 2)) * 4))) / 5) * 4))) * (((((((10 + 11) + 4) + (((19 - 2) * 2) + 11)) - (5 + 18)) * (3 * (3 + 6))) + (((((13 * 2) * 2) * 2) + ((5 + 2) * ((((3 * 8) + (2 * 7)) * 2) - (((2 * 4) + (3 * 5)) - 4)))) * 2)) + (2 * ((7 * 3) + ((4 + 9) - 1))))) * ((((((4 * ((((2 * ((2 + 5) * 5)) + (3 * (((19 * 4) / 4) + 4))) * 2) - (3 * (5 + 2)))) + (5 + (16 - 2))) + ((((3 * 5) + (2 * (((1 + 6) + 1) + 3))) + 6) * (2 * (5 * 5)))) * 2) + (((((3 * (1 + 6)) + 9) + (17 + (((4 * 4) * 3) / 8))) * 3) * 3)) * (((((5 * 2) * 8) + (3 * 15)) + ((20 + 3) + (4 * 2))) + ((2 * (2 * (2 + 14))) + ((((2 * 13) * 2) + (3 * 3)) + (4 * 3)))))) + ((((8 * (8 + (4 + 17))) + ((15 + (2 * 6)) * 3)) * 2) * (2 * (2 * ((3 * (((((((((((2 + (9 * (5 * 3))) * 2) / 2) * (4 * (((5 * 5) - 2) * 2))) + (((6 * (11 * 2)) * (2 * (((((5 + 3) + (3 * ((((1 + 5) + 1) * (2 + 4)) + 5))) - (6 * (10 - 3))) * 5) + (18 * 11)))) / 2)) + (7 * (((((5 + 2) + 6) * 4) + (3 * (3 * 3))) + ((3 * 7) * (2 * 9))))) - ((((6 * (((3 * (3 * 9)) * 9) - (((2 * ((((7 + (3 * 2)) * 2) + 17) + ((6 * 6) + (6 + 18)))) / 2) * 2))) + (19 * (13 + (3 * (15 + 1))))) * 2) * 4)) * 2) / 2) * ((2 * (19 * ((5 * (11 + 2)) + (((13 + 4) * (11 * 10)) / 5)))) + (((6 * 10) + (3 * 11)) * (2 + ((2 * (14 + 17)) / 2))))) + ((4 * (((((2 * 17) * (17 * 14)) - (((4 + ((2 * 3) + (1 + (6 * 6)))) * 6) + (((4 * 13) * 2) + ((11 + ((((((3 * 3) * 2) + 5) * 3) + 4) - ((3 * 7) + 2))) * 3)))) + ((3 * (1 + 10)) * (((15 + (2 * ((2 * ((4 * 4) - 4)) - (5 + 2)))) * 7) + (((11 * (((((2 * (((4 * (20 + 3)) / 4) + ((3 * 3) * 2))) / 2) * 5) + (((2 * 3) * 6) + 7)) / (4 * 2))) + (3 * 4)) * 2)))) + (11 * (((((1 + 6) * 3) * 4) + 2) + ((5 * ((((2 * (2 + (14 / 2))) - 5) * 3) + 2)) + ((19 * 2) + ((7 + 9) + (12 + (11 * 2))))))))) * (((2 * ((((7 * 3) * 5) * (((2 * 17) - (5 + (8 - 2))) * (2 + 5))) + ((6 + 2) * (((((((11 + ((((6 + (3 + 4)) + 10) + 4) + 4)) + 4) - (4 * 2)) + 1) + ((5 * 3) + (13 + (((8 + ((14 / 2) + 8)) + (4 * 2)) + 3)))) * 2) * 2)))) + ((19 + (3 * (3 * 5))) * (2 * (((((8 + ((4 + 3) + ((2 + 5) + 3))) + (3 + 13)) - (4 + 7)) + 13) * 2)))) + (15 * ((3 * ((((((2 * (((((((5 + 8) * 2) + 5) * 2) / 2) + 7) / 2)) / 2) * 9) + (4 * 12)) + (5 + 2)) + (5 + 2))) + ((2 * ((((3 * (((2 * ((((((1 + (20 + 3)) + 10) / 2) + (3 * (4 * 2))) + (5 * 5)) / (2 * 3))) / 2) + 18)) / 3) + ((2 * (2 + (3 * 3))) * 2)) + (3 * 7))) * ((7 * 7) - 9)))))))) / 3)))))) - (((((((((6 + 5) * 2) + ((((((3 * 3) * 3) + 2) * 2) + (2 * (4 + (5 + 14)))) - ((((8 + (2 * (2 * 4))) - (3 + 4)) + 6) + 6))) * 2) + (((7 * ((5 * (10 + 3)) + (2 * (11 + (2 * 4))))) + ((((((((((((((10 + 1) - 2) * 11) + (2 * (5 * (((2 * 10) + 3) + (2 * 3))))) + (8 * 4)) + (3 * ((((((4 * (4 + 2)) + ((((7 * 5) * ((10 + 4) / 2)) + (2 * ((19 * ((((5 * ((((((4 + (20 + 2)) + ((((((13 + 20) * ((1 + (3 * 2)) + 10)) + (((((14 * (5 + 2)) * ((3 * (6 * 2)) + (4 * 7))) + ((12 * (5 * 5)) + ((((1 + (((2 * 4) - 2) * 11)) - 16) * 4) + ((2 + 5) * 3)))) / (4 + 3)) + (((((2 * ((((((4 * 5) * ((1 + 10) * 2)) / 4) + (((5 * 3) * 3) + 2)) * 2) + (((4 * ((2 + (2 * 3)) * 2)) + (((2 + 7) * 3) + (2 * (8 + (3 * 3))))) + ((11 * 2) + 2)))) + ((((((((((((((((3 * 3) * 9) + (((((2 + (3 * 5)) + (3 * 5)) * 6) * (((((2 * (((5 + ((((2 + 5) + (11 + 5)) * 3) / 3)) + ((2 * 3) * (11 * 2))) + 7)) + (((5 + (((7 * 2) / 2) * 3)) / 2) * 16)) + 301) / (3 * 2)) - (((4 * 3) * ((5 * 3) + 2)) + (((7 * ((2 * 5) - 3)) + (8 + ((4 * ((3 * 17) + (9 + 2))) / 8))) + ((2 * 7) * (3 + 13)))))) - (((((17 * 2) - 11) * 7) - (2 * ((3 + 10) * 2))) * 7))) / ((((15 - 4) * 4) * 2) / (2 * 4))) + (((((4 * 7) * 2) / 8) + (12 + 4)) + ((((((((8 * 2) * (2 * (((2 * 17) + 3) * 2))) / 2) / 2) + (((((3 * 5) * 2) + (6 * 4)) * 3) - ((7 * 7) + 4))) * 2) / 2) + ((((4 * 4) + 13) * 3) * 2)))) * 2) - ((((5 * 5) * 5) + (3 * 2)) * 2)) / (2 * 3)) + (3 * ((((4 * 2) * ((2 * ((2 * (10 + (8 * 3))) / 4)) / 2)) + (((5 + 7) * 2) + (3 + 20))) / 3))) * 18) - (15 * ((((6 + 3) * 3) + (5 + 1)) - 2))) * 2) + (((4 * 7) + ((17 + 6) * 3)) * 4)) / 2) - ((3 * 3) * (((((3 + 4) * 3) * 2) + (4 * 11)) + (1 + (2 * 12))))) / 2)) * 3) - (((7 + ((16 + 1) + ((5 * 2) + 3))) * 7) + ((((2 * 4) * 2) * 4) * 2))) * 2))) / 2) - ((5 + 6) * ((4 * 2) + ((9 - 1) * 2)))) / 2)) * 2) - ((((15 * 2) + (3 + (2 * 4))) * 5) + (1 + (((2 * 6) * 3) + (((1 + 10) * 2) + 2))))) / (4 * 3)) + (((2 * 3) * 6) * (10 + (6 + 3))))) - (((12 + (5 * 5)) * 2) * 2)) / 11) + (((7 * (2 + 5)) * 6) + ((12 * 2) + (3 + (((14 - 4) * 4) / 4)))))) - ((3 + (4 * 5)) * (4 + 15))))) / 5)) * 3) - ((((((2 * ((2 * (16 + ((7 * 3) + 4))) / 2)) - ((5 + (16 * 2)) - ((11 * 2) / 2))) * (5 * (4 + (2 * 3)))) / 2) / 2) + ((2 * ((3 + 4) + (8 + (5 + 9)))) + ((3 * 3) * ((15 + 3) + 5))))) / 2) - (2 * ((4 * (((10 + (7 + (2 * 3))) * 3) / 3)) + ((3 * 13) + (4 * 17))))))) + (((10 * 4) + 1) * (2 + 5))) / 2) + (((1 + ((4 + 3) + 4)) * 2) + 2)) * 2) - (13 * ((5 * 5) * 2))) / 7) - ((3 + (3 * (3 * 3))) * ((3 + 8) * 2))) / 2)) * 15)) * 2) - (3 * (5 + (((1 + (2 * 3)) - 1) * (((17 * 2) + 4) + ((16 + (2 * 3)) / 2)))))) + ((((3 + 5) - 2) * (((11 + 12) + 8) - 2)) - 17)) / 2)) / (3 * 2))))"
//           )
//         );

//         console.log(
//           "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c            evaluate(monkey2.string);    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 111 \n",
//           "color: white; background: black; font-weight: bold",
//           "",
//           evaluate(
//             "(((((7 * ((3 * ((((2 * (13 + (4 * 7))) * (((16 + ((5 + (2 * (4 + 3))) + ((3 * 2) * 4))) * 2) / 2)) * (((2 * ((((2 * ((5 + 18) + (2 * (3 * 3)))) + (5 * (14 - 3))) * 2) / 2)) / 2) * 2)) + (((((((11 + 1) + ((((2 + (3 * 3)) * 3) + (4 * 6)) + ((4 + 9) * 5))) * 4) - (3 * 15)) - (13 * 3)) + ((((10 * 3) + 1) * 3) + (14 + (((2 * 4) + (3 * 3)) * (3 * 4))))) * ((((2 * 3) * (((11 * 3) - 9) + ((4 + 9) + 4))) - ((3 * 7) + (((2 * (4 + 3)) + 15) * 2))) * ((3 * (3 * 3)) + 4))))) - (((2 * ((((2 * (2 * 4)) * 6) * ((((((2 * ((((((5 * 2) + 3) * 6) / 2) + ((2 * ((((18 + 3) / 3) * (18 + 5)) / 7)) + (13 * 4))) + (3 * 12))) / 2) + (14 * (3 * 2))) * 8) - ((6 + (16 - 3)) * (16 + 7))) * 3)) + (((((1 + ((3 * 19) * 2)) - (3 * 3)) + ((5 + 2) * 19)) * (20 + (1 + (8 + (14 * 2))))) + ((11 * (((((2 * 3) * 16) + 1) * 2) / 2)) * (11 * 2))))) * 2) * 2))) / (10 - 3)) * 2) / 2) * ((17 * ((9 + 2) * 11)) * (((((1 + (5 * (6 + 2))) + 2) + 5) + ((((7 * (1 + (3 * 2))) - 2) * 2) / 2)) * 15)))"
//           )
//         );

//         monkeys[monkeyId].result =
//           evaluate(monkey1.string) === evaluate(monkey2.string) ? -111 : -222;
//         monkeys[monkeyId].resultDone = true;
//       }
//     }
//   });

//   done = true;
//   Object.keys(monkeys).forEach((monkeyId) => {
//     if (!monkeys[monkeyId].resultDone) {
//       done = false;
//     }
//   });
// }

// if (monkeys["root"].result === -111) {
//   console.log(
//     "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c    monkeys    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 70 \n",
//     "color: white; background: black; font-weight: bold",
//     "",
//     monkeys["humn"].result
//   );
// }
// }

// console.log(
//   "\x1b[8m\x1b[40m\x1b[0m\x1b[7m%c    done    \x1b[8m\x1b[40m\x1b[0m%c a.jsx 90 \n",
//   "color: white; background: black; font-weight: bold",
//   "",
//   evaluate(monkeys["bmpj"].string)
// );

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const isAdjecent = (part1, part2) =>
  (part1[0] === part2[0] ||
    part1[0] === part2[0] - 1 ||
    part1[0] === part2[0] + 1) &&
  (part1[1] === part2[1] ||
    part1[1] === part2[1] - 1 ||
    part1[1] === part2[1] + 1);

export default () => {
  let currMove = 0;

  // let totalNrOfMoves = 0;
  // for (let i = 0; i < data.length; i++) {
  //   const move = data[i];
  //   const nrOfMovesInCurrentDirection = move[1];
  //   for (let i = 0; i < nrOfMovesInCurrentDirection; i++) {
  //     totalNrOfMoves++;
  //   }
  // }
  const totalNrOfMoves = 99999999999999999999999999;

  const [moveNr, setMoveNr] = useState(0);
  const moveNrRef = React.useRef(moveNr);
  moveNrRef.current = moveNr;

  const startPlaying = () => {
    if (moveNr < totalNrOfMoves) {
      const timer = setInterval(() => {
        moveNrRef.current < totalNrOfMoves
          ? setMoveNr(moveNrRef.current + 1)
          : clearInterval(timer);
      }, 30);
    }
  };

  // *********************************************************************************

  let result = 0;

  // *********************************************************************************

  return <div></div>;
};
